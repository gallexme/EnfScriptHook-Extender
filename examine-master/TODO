
TODO:

Definitions:
  [ ] Not done
  [?] to be done or not ?
  [X] done

[ ] Always look at 'TODO' and 'FIXME' in code

[X] Split the code so that the overloaded functions are in a separate
    file

[X] Stack trace code in the lib

[ ] Better name for the overloads : exm_replace_malloc() like valgrind ?

[ ] Add all the memory functions to overload (win32 and C Run Time, GDI, ...)

   [X] ntdll: RtlAllocateHeap
   [X] ntdll: RtlFreeHeap

   [X] kernel32: HeapAlloc
   [X] kernel32: HeapReAlloc
   [X] kernel32: HeapFree
   [?] kernel32: HeapCreate
   [?] kernel32: HeapDestroy
   [ ] kernel32: VirtualAlloc
   [ ] kernel32: VirtualAllocEx
   [ ] kernel32: VirtualAllocExNuma (>= Vista)
   [ ] kernel32: VirtualFree
   [ ] kernel32: VirtualFreeEx
   [X] kernel32: GlobalAlloc
   [X] kernel32: GlobalReAlloc
   [X] kernel32: GlobalFree
   [?] kernel32: GlobalLock
   [?] kernel32: GlobalUnlock
   [X] kernel32: LocalAlloc
   [X] kernel32: LocalReAlloc
   [X] kernel32: LocalFree
   [?] kernel32: LocalLock
   [?] kernel32: LocalUnlock

   [X] Win32: CopyMemory (it's a define of memcpy)

   [ ] shlwapi: StrCat
   [ ] shlwapi: StrCatBuff
   [ ] shlwapi: StringCbCat
   [ ] shlwapi: StringCbCatEx
   [ ] shlwapi: StringCbCatN
   [ ] shlwapi: StringCbCatNEx
   [ ] shlwapi: StringCchCat
   [ ] shlwapi: StringCchCatEx
   [ ] shlwapi: StringCchCatN
   [ ] shlwapi: StringCchCatNEx

   [X] CRT: malloc
   [X] CRT: free
   [X] CRT: calloc
   [X] CRT: realloc
   [X] CRT: _expand
   [X] CRT: aligned_malloc
   [X] CRT: _strdup

   [X] CRT: memcpy
   [ ] CRT: strcpy
   [ ] CRT: strncpy
   [X] CRT: strcat
   [X] CRT: _mbscat
   [ ] CRT: lstrcat (it's a define of lstrcatA)
   [ ] CRT: lstrcatA
   [ ] CRT: strncat

   [ ] C++: new
   [ ] C++: new[]
   [ ] C++: delete
   [ ] C++: delete[]

   [ ] GDI:

[X] Add checks for other CRT DLL than msvcrt.dll, msvcr90.dll, msvcr90d.dll,...

[ ] Add a call stack with dgbhelp API for vc++

[ ] "missing debug information in module XXX?" (with the '?' at the end) when
    there is a mismatch between the module which corresponds to the frame
    address and the file found by libbfd (gcc) : the file should be in the
    module

[ ] C++ Support with demangle

[ ] Better Elm GUI

[ ] Support of the suppression files ?

[ ] Invalid read / write ? possible ?

[ ] add libssp support

[ ] add resource file
